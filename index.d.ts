/** Declaration file generated by dts-gen */

export class NoDocumentSuppliedError extends Error {
  constructor(message: string)
}
export class UniqueIntegrityConstraintViolationError extends Error {
  constructor(message: string)
}

export class Collection {
  constructor(...args: any[]);

  createIndex(...args: any[]): void;

  find(...args: any[]): Cursor;

  findOne(...args: any[]): Promise<any>;

  delete(...args: any[]): Promise<any>;

  getIndex(...args: any[]): void;

  indexExists(...args: any[]): void;

  insert<T>(...args: T[]): Promise<T>;

  listIndexes(...args: any[]): void;

  reIndex(...args: any[]): void;

  update(...args: any[]): { nMatched: number; nModified: number; nUpserted: number; };

}

export class Cursor {
  constructor(...args: any[]);

  count(...args: any[]): number;

  getIndex(...args: any[]): void;

  hint(...args: any[]): Cursor;

  limit(...args: any[]): Cursor;

  skip(...args: any[]): Cursor;

  sort(...args: any[]): Cursor;

  then<TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | Promise<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;

}

export class DB {
  constructor(...args: any[]);

  close(...args: any[]): void;

  collection(...args: any[]): Collection;

}

export namespace BSON {
  class BSONError {
    constructor(message: any);

    static captureStackTrace(p0: any, p1: any): any;

    static stackTraceLimit: number;

  }

  class BSONRegExp {
    constructor(pattern: any, options: any);

    toExtendedJSON(options: any): any;

    static fromExtendedJSON(doc: any): any;

    static parseOptions(options: any): any;

  }

  class BSONSymbol {
    constructor(value: any);

    inspect(): any;

    toExtendedJSON(): any;

    toJSON(): any;

    toString(): any;

    valueOf(): any;

    static fromExtendedJSON(doc: any): any;

  }

  class BSONTypeError {
    constructor(message: any);

    static captureStackTrace(p0: any, p1: any): any;

    static stackTraceLimit: number;

  }

  class Binary {
    constructor(buffer: any, subType: any);

    inspect(): any;

    length(): any;

    put(byteValue: any): void;

    read(position: any, length: any): any;

    toExtendedJSON(options: any): any;

    toJSON(): any;

    toString(format: any): any;

    toUUID(): any;

    value(asRaw: any): any;

    write(sequence: any, offset: any): void;

    static BSON_BINARY_SUBTYPE_DEFAULT: number;

    static BUFFER_SIZE: number;

    static SUBTYPE_BYTE_ARRAY: number;

    static SUBTYPE_COLUMN: number;

    static SUBTYPE_DEFAULT: number;

    static SUBTYPE_ENCRYPTED: number;

    static SUBTYPE_FUNCTION: number;

    static SUBTYPE_MD5: number;

    static SUBTYPE_USER_DEFINED: number;

    static SUBTYPE_UUID: number;

    static SUBTYPE_UUID_OLD: number;

    static fromExtendedJSON(doc: any, options: any): any;

  }

  class Code {
    constructor(code: any, scope: any);

    inspect(): any;

    toExtendedJSON(): any;

    toJSON(): any;

    static fromExtendedJSON(doc: any): any;

  }

  class DBRef {
    constructor(collection: any, oid: any, db: any, fields: any);

    inspect(): any;

    toExtendedJSON(options: any): any;

    toJSON(): any;

    static fromExtendedJSON(doc: any): any;

  }

  class Decimal128 {
    constructor(bytes: any);

    inspect(): any;

    toExtendedJSON(): any;

    toJSON(): any;

    toString(): any;

    static fromExtendedJSON(doc: any): any;

    static fromString(representation: any): any;

  }

  class Double {
    constructor(value: any);

    inspect(): any;

    toExtendedJSON(options: any): any;

    toJSON(): any;

    toString(radix: any): any;

    valueOf(): any;

    static fromExtendedJSON(doc: any, options: any): any;

  }

  class Int32 {
    constructor(value: any);

    inspect(): any;

    toExtendedJSON(options: any): any;

    toJSON(): any;

    toString(radix: any): any;

    valueOf(): any;

    static fromExtendedJSON(doc: any, options: any): any;

  }

  class Long {
    constructor(low: any, high: any, unsigned: any);

    add(addend: any): any;

    and(other: any): any;

    comp(other: any): any;

    compare(other: any): any;

    div(divisor: any): any;

    divide(divisor: any): any;

    eq(other: any): any;

    equals(other: any): any;

    eqz(): any;

    ge(other: any): any;

    getHighBits(): any;

    getHighBitsUnsigned(): any;

    getLowBits(): any;

    getLowBitsUnsigned(): any;

    getNumBitsAbs(): any;

    greaterThan(other: any): any;

    greaterThanOrEqual(other: any): any;

    gt(other: any): any;

    gte(other: any): any;

    inspect(): any;

    isEven(): any;

    isNegative(): any;

    isOdd(): any;

    isPositive(): any;

    isZero(): any;

    le(other: any): any;

    lessThan(other: any): any;

    lessThanOrEqual(other: any): any;

    lt(other: any): any;

    lte(other: any): any;

    mod(divisor: any): any;

    modulo(divisor: any): any;

    mul(multiplier: any): any;

    multiply(multiplier: any): any;

    ne(other: any): any;

    neg(): any;

    negate(): any;

    neq(other: any): any;

    not(): any;

    notEquals(other: any): any;

    or(other: any): any;

    rem(divisor: any): any;

    shiftLeft(numBits: any): any;

    shiftRight(numBits: any): any;

    shiftRightUnsigned(numBits: any): any;

    shl(numBits: any): any;

    shr(numBits: any): any;

    shr_u(numBits: any): any;

    shru(numBits: any): any;

    sub(subtrahend: any): any;

    subtract(subtrahend: any): any;

    toBigInt(): any;

    toBytes(le: any): any;

    toBytesBE(): any;

    toBytesLE(): any;

    toExtendedJSON(options: any): any;

    toInt(): any;

    toNumber(): any;

    toSigned(): any;

    toString(radix: any): any;

    toUnsigned(): any;

    xor(other: any): any;

    static fromBigInt(value: any, unsigned: any): any;

    static fromBits(lowBits: any, highBits: any, unsigned: any): any;

    static fromBytes(bytes: any, unsigned: any, le: any): any;

    static fromBytesBE(bytes: any, unsigned: any): any;

    static fromBytesLE(bytes: any, unsigned: any): any;

    static fromExtendedJSON(doc: any, options: any): any;

    static fromInt(value: any, unsigned: any): any;

    static fromNumber(value: any, unsigned: any): any;

    static fromString(str: any, unsigned: any, radix: any): any;

    static fromValue(val: any, unsigned: any): any;

    static isLong(value: any): any;

  }

  class LongWithoutOverridesClass {
    constructor(low: any, high: any, unsigned: any);

    add(addend: any): any;

    and(other: any): any;

    comp(other: any): any;

    compare(other: any): any;

    div(divisor: any): any;

    divide(divisor: any): any;

    eq(other: any): any;

    equals(other: any): any;

    eqz(): any;

    ge(other: any): any;

    getHighBits(): any;

    getHighBitsUnsigned(): any;

    getLowBits(): any;

    getLowBitsUnsigned(): any;

    getNumBitsAbs(): any;

    greaterThan(other: any): any;

    greaterThanOrEqual(other: any): any;

    gt(other: any): any;

    gte(other: any): any;

    inspect(): any;

    isEven(): any;

    isNegative(): any;

    isOdd(): any;

    isPositive(): any;

    isZero(): any;

    le(other: any): any;

    lessThan(other: any): any;

    lessThanOrEqual(other: any): any;

    lt(other: any): any;

    lte(other: any): any;

    mod(divisor: any): any;

    modulo(divisor: any): any;

    mul(multiplier: any): any;

    multiply(multiplier: any): any;

    ne(other: any): any;

    neg(): any;

    negate(): any;

    neq(other: any): any;

    not(): any;

    notEquals(other: any): any;

    or(other: any): any;

    rem(divisor: any): any;

    shiftLeft(numBits: any): any;

    shiftRight(numBits: any): any;

    shiftRightUnsigned(numBits: any): any;

    shl(numBits: any): any;

    shr(numBits: any): any;

    shr_u(numBits: any): any;

    shru(numBits: any): any;

    sub(subtrahend: any): any;

    subtract(subtrahend: any): any;

    toBigInt(): any;

    toBytes(le: any): any;

    toBytesBE(): any;

    toBytesLE(): any;

    toExtendedJSON(options: any): any;

    toInt(): any;

    toNumber(): any;

    toSigned(): any;

    toString(radix: any): any;

    toUnsigned(): any;

    xor(other: any): any;

    static fromBigInt(value: any, unsigned: any): any;

    static fromBits(lowBits: any, highBits: any, unsigned: any): any;

    static fromBytes(bytes: any, unsigned: any, le: any): any;

    static fromBytesBE(bytes: any, unsigned: any): any;

    static fromBytesLE(bytes: any, unsigned: any): any;

    static fromExtendedJSON(doc: any, options: any): any;

    static fromInt(value: any, unsigned: any): any;

    static fromNumber(value: any, unsigned: any): any;

    static fromString(str: any, unsigned: any, radix: any): any;

    static fromValue(val: any, unsigned: any): any;

    static isLong(value: any): any;

  }

  class Map {
    constructor();

    // Native method; no parameter or return type inference available
    clear(): any;

    // Native method; no parameter or return type inference available
    delete(p0: any): any;

    // Native method; no parameter or return type inference available
    entries(): any;

    // Native method; no parameter or return type inference available
    forEach(p0: any): any;

    // Native method; no parameter or return type inference available
    get(p0: any): any;

    // Native method; no parameter or return type inference available
    has(p0: any): any;

    // Native method; no parameter or return type inference available
    keys(): any;

    // Native method; no parameter or return type inference available
    set(p0: any, p1: any): any;

    // Native method; no parameter or return type inference available
    values(): any;

  }

  class MaxKey {
    constructor();

    inspect(): any;

    toExtendedJSON(): any;

    static fromExtendedJSON(): any;

  }

  class MinKey {
    constructor();

    inspect(): any;

    toExtendedJSON(): any;

    static fromExtendedJSON(): any;

  }

  class ObjectID {
    constructor(inputId: any);

    equals(otherId: any): any;

    generate(...args: any[]): any;

    getInc(...args: any[]): any;

    getTimestamp(): any;

    get_inc(...args: any[]): any;

    inspect(): any;

    toExtendedJSON(): any;

    toHexString(): any;

    toJSON(): any;

    toString(format: any): any;

    static createFromHexString(hexString: any): any;

    static createFromTime(time: any): any;

    static createPk(): any;

    static fromExtendedJSON(doc: any): any;

    static generate(time: any): any;

    static getInc(): any;

    static get_inc(...args: any[]): any;

    static index: number;

    static isValid(id: any): any;

  }

  class ObjectId {
    constructor(inputId: any);

    equals(otherId: any): any;

    generate(...args: any[]): any;

    getInc(...args: any[]): any;

    getTimestamp(): any;

    get_inc(...args: any[]): any;

    inspect(): any;

    toExtendedJSON(): any;

    toHexString(): any;

    toJSON(): any;

    toString(format: any): any;

    static createFromHexString(hexString: any): any;

    static createFromTime(time: any): any;

    static createPk(): any;

    static fromExtendedJSON(doc: any): any;

    static generate(time: any): any;

    static getInc(): any;

    static get_inc(...args: any[]): any;

    static index: number;

    static isValid(id: any): any;

  }

  class Timestamp {
    constructor(low: any, high: any);

    inspect(): any;

    toExtendedJSON(): any;

    toJSON(): any;

    static fromBigInt(value: any, unsigned: any): any;

    static fromBits(lowBits: any, highBits: any): any;

    static fromBytes(bytes: any, unsigned: any, le: any): any;

    static fromBytesBE(bytes: any, unsigned: any): any;

    static fromBytesLE(bytes: any, unsigned: any): any;

    static fromExtendedJSON(doc: any): any;

    static fromInt(value: any): any;

    static fromNumber(value: any): any;

    static fromString(str: any, optRadix: any): any;

    static fromValue(val: any, unsigned: any): any;

    static isLong(value: any): any;

  }

  class UUID {
    constructor(input: any);

    equals(otherId: any): any;

    inspect(): any;

    toBinary(): any;

    toHexString(includeDashes: any): any;

    toJSON(): any;

    toString(encoding: any): any;

    static BSON_BINARY_SUBTYPE_DEFAULT: number;

    static BUFFER_SIZE: number;

    static SUBTYPE_BYTE_ARRAY: number;

    static SUBTYPE_COLUMN: number;

    static SUBTYPE_DEFAULT: number;

    static SUBTYPE_ENCRYPTED: number;

    static SUBTYPE_FUNCTION: number;

    static SUBTYPE_MD5: number;

    static SUBTYPE_USER_DEFINED: number;

    static SUBTYPE_UUID: number;

    static SUBTYPE_UUID_OLD: number;

    static createFromHexString(hexString: any): any;

    static fromExtendedJSON(doc: any, options: any): any;

    static generate(): any;

    static isValid(input: any): any;

  }

  const BSON_BINARY_SUBTYPE_BYTE_ARRAY: number;

  const BSON_BINARY_SUBTYPE_COLUMN: number;

  const BSON_BINARY_SUBTYPE_DEFAULT: number;

  const BSON_BINARY_SUBTYPE_ENCRYPTED: number;

  const BSON_BINARY_SUBTYPE_FUNCTION: number;

  const BSON_BINARY_SUBTYPE_MD5: number;

  const BSON_BINARY_SUBTYPE_USER_DEFINED: number;

  const BSON_BINARY_SUBTYPE_UUID: number;

  const BSON_BINARY_SUBTYPE_UUID_NEW: number;

  const BSON_DATA_ARRAY: number;

  const BSON_DATA_BINARY: number;

  const BSON_DATA_BOOLEAN: number;

  const BSON_DATA_CODE: number;

  const BSON_DATA_CODE_W_SCOPE: number;

  const BSON_DATA_DATE: number;

  const BSON_DATA_DBPOINTER: number;

  const BSON_DATA_DECIMAL128: number;

  const BSON_DATA_INT: number;

  const BSON_DATA_LONG: number;

  const BSON_DATA_MAX_KEY: number;

  const BSON_DATA_MIN_KEY: number;

  const BSON_DATA_NULL: number;

  const BSON_DATA_NUMBER: number;

  const BSON_DATA_OBJECT: number;

  const BSON_DATA_OID: number;

  const BSON_DATA_REGEXP: number;

  const BSON_DATA_STRING: number;

  const BSON_DATA_SYMBOL: number;

  const BSON_DATA_TIMESTAMP: number;

  const BSON_DATA_UNDEFINED: number;

  const BSON_INT32_MAX: number;

  const BSON_INT32_MIN: number;

  const BSON_INT64_MAX: number;

  const BSON_INT64_MIN: number;

  function calculateObjectSize(object: any, options: any): any;

  function deserialize(buffer: any, options: any): any;

  function deserializeStream(data: any, startIndex: any, numberOfDocuments: any, documents: any, docStartIndex: any, options: any): any;

  function serialize(object: any, options: any): any;

  function serializeWithBufferAndIndex(object: any, finalBuffer: any, options: any): any;

  function setInternalBufferSize(size: any): void;

  namespace EJSON {
    function deserialize(ejson: any, options: any): any;

    function parse(text: any, options: any): any;

    function serialize(value: any, options: any): any;

    function stringify(value: any, replacer: any, space: any, options: any): any;

  }

  namespace Long {
    namespace MAX_UNSIGNED_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MAX_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MIN_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace NEG_ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace TWO_PWR_24 {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

  }

  namespace LongWithoutOverridesClass {
    namespace MAX_UNSIGNED_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MAX_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MIN_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace NEG_ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace TWO_PWR_24 {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

  }

  namespace Timestamp {
    namespace MAX_UNSIGNED_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MAX_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace MIN_VALUE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace NEG_ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace TWO_PWR_24 {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UONE {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace UZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

    namespace ZERO {
      const high: number;

      const low: number;

      const unsigned: boolean;

      function add(addend: any): any;

      function and(other: any): any;

      function comp(other: any): any;

      function compare(other: any): any;

      function div(divisor: any): any;

      function divide(divisor: any): any;

      function eq(other: any): any;

      function equals(other: any): any;

      function eqz(): any;

      function ge(other: any): any;

      function getHighBits(): any;

      function getHighBitsUnsigned(): any;

      function getLowBits(): any;

      function getLowBitsUnsigned(): any;

      function getNumBitsAbs(): any;

      function greaterThan(other: any): any;

      function greaterThanOrEqual(other: any): any;

      function gt(other: any): any;

      function gte(other: any): any;

      function inspect(): any;

      function isEven(): any;

      function isNegative(): any;

      function isOdd(): any;

      function isPositive(): any;

      function isZero(): any;

      function le(other: any): any;

      function lessThan(other: any): any;

      function lessThanOrEqual(other: any): any;

      function lt(other: any): any;

      function lte(other: any): any;

      function mod(divisor: any): any;

      function modulo(divisor: any): any;

      function mul(multiplier: any): any;

      function multiply(multiplier: any): any;

      function ne(other: any): any;

      function neg(): any;

      function negate(): any;

      function neq(other: any): any;

      function not(): any;

      function notEquals(other: any): any;

      function or(other: any): any;

      function rem(divisor: any): any;

      function shiftLeft(numBits: any): any;

      function shiftRight(numBits: any): any;

      function shiftRightUnsigned(numBits: any): any;

      function shl(numBits: any): any;

      function shr(numBits: any): any;

      function shr_u(numBits: any): any;

      function shru(numBits: any): any;

      function sub(subtrahend: any): any;

      function subtract(subtrahend: any): any;

      function toBigInt(): any;

      function toBytes(le: any): any;

      function toBytesBE(): any;

      function toBytesLE(): any;

      function toExtendedJSON(options: any): any;

      function toInt(): any;

      function toNumber(): any;

      function toSigned(): any;

      function toString(radix: any): any;

      function toUnsigned(): any;

      function xor(other: any): any;

    }

  }

}

